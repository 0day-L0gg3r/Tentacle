package com.orleven.tentacle.module.pentest.test;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.orleven.tentacle.config.ConfigDBConfig;
import com.orleven.tentacle.config.DBConfig;
import com.orleven.tentacle.core.IOC;
import com.orleven.tentacle.dao.imp.VulnerReportDaoImp;
import com.orleven.tentacle.dao.imp.VulnerScriptDaoImp;
import com.orleven.tentacle.define.Message;
import com.orleven.tentacle.define.Permeate;
import com.orleven.tentacle.entity.VulnerReport;
import com.orleven.tentacle.entity.VulnerScript;
import com.orleven.tentacle.module.MainModule;
import com.orleven.tentacle.module.bean.AssetBean;
import com.orleven.tentacle.module.bean.BasicInfoBean;
import com.orleven.tentacle.module.bean.ServiceBean;
import com.orleven.tentacle.module.bean.SshServiceBean;
import com.orleven.tentacle.module.bean.WebServiceBean;
import com.orleven.tentacle.module.common.BurstDictionary;
import com.orleven.tentacle.module.pentest.SshAbstractScript;
import com.orleven.tentacle.module.pentest.WebAbstractScript;
import com.orleven.tentacle.module.pentest.script.SshWeakBurst;
import com.orleven.tentacle.module.unit.BurstUnit;
import com.orleven.tentacle.module.unit.ModuleTestUnit;
import com.orleven.tentacle.util.DataUtil;


/**
 * 模块 渗透 测试
 * @author orleven
 * @date 2017年5月15日
 */
@Component
public class ModulePentestTest {
	
	@Autowired
	private VulnerScriptDaoImp vulnerScriptDaoImp;
	
	@Autowired
	private VulnerReportDaoImp vulnerReportDaoImp;
	
	/**
	 * 脚本测试，无线程
	 * @data 2017年5月15日
	 */
	public void scriptTest(){
		// 目标初始化
		String host = "192.168.111.131";
		String[] ports = {"80","8080"};
		
		AssetBean assetBean = IOC.ctx.getBean(AssetBean.class);
		
		// 主机基础信息初始化
		BasicInfoBean basicInfoBean = IOC.ctx.getBean(BasicInfoBean.class);
		basicInfoBean.setHost(host);
				
		// 端口\服务信息初始化
		assetBean.setBasicInfoBean(basicInfoBean);
		assetBean.setServiceBeans(ports);

	
		List<VulnerScript>  vulnerScripts  = vulnerScriptDaoImp.getAll();
		for (VulnerScript vulnerScript:vulnerScripts){
			if (vulnerScript.getVulnerType().equals("Web")){
			    for (ServiceBean serviceBean : assetBean.getServiceBeans()) {
			    	WebServiceBean webServiceBean = IOC.ctx.getBean(WebServiceBean.class);
			    	
			    	webServiceBean.setBasicInfoBean(basicInfoBean);
			    	webServiceBean.setServiceBean(serviceBean);

			    	
			    	WebAbstractScript webScriptBase = null;
			    	webScriptBase = (WebAbstractScript) IOC.ctx.getBean(vulnerScript.getScriptName());

			    	webScriptBase.setWebServiceBean(webServiceBean);
			    	webScriptBase.getVulnerBean().setVulner(vulnerScript);
			    	webScriptBase.setUrlPath("/Struts2VulExample/user/login.action");
			    	webScriptBase.setCookies("");
			    	webScriptBase.prove();
			    	if(webScriptBase.getVulnerBean().getIsVulner() == Permeate.isVulner){
			    		System.out.println("********************************");
			    		System.out.println("[+] VulnerName: "+vulnerScript.getVulnerName());
			    		System.out.println("[+] VulnerCVE: "+vulnerScript.getVulnerCVE());
			    		System.out.println("[+] VulnerUrl: "+webScriptBase.getTargetUrl());
			    		
			    		webScriptBase.execCommand("ls");
				    	System.out.println(webScriptBase.getVulnerBean().getProveBeans().getReceiveMessage());
			    	}
			    }
			}
			
		}
	}
	
//	/**
//	 * 单元测试（线程测试）
//	 * @data 2017年5月15日
//	 */
//	public void unitTest(){
//		// 目标初始化
//		String host = "192.168.199.130";
//		String[] ports = {"22" };
//		
//		AssetBean assetBean = IOC.ctx.getBean(AssetBean.class);
//		
//		// 主机基础信息初始化
//		BasicInfoBean basicInfoBean = IOC.ctx.getBean(BasicInfoBean.class);
//		basicInfoBean.setHost(host);
//				
//		// 端口\服务信息初始化
//		assetBean.setBasicInfoBean(basicInfoBean);
//		assetBean.setServiceBeans(ports);
//		
//		List<VulnerScript>  vulnerScripts  = vulnerDaoImp.getAll();
//		for (VulnerScript vulnerScript:vulnerScripts){
//			if (vulnerScript.getScriptType()!=null&&vulnerScript.getScriptType().equals("Burst")){
//			    for (ServiceBean serviceBean : assetBean.getServiceBeans()) {
//			    	if(vulnerScript.getVulnerType().equals("SSH")){
//			    		SshServiceBean sshServiceBean = IOC.ctx.getBean(SshServiceBean.class);
//			    		sshServiceBean.setBasicInfoBean(basicInfoBean);
//			    		sshServiceBean.setServiceBean(serviceBean);
//
//				    	
//			    		SshAbstractScript sshScriptBase = null;
//			    		sshScriptBase = (SshAbstractScript) IOC.ctx.getBean(vulnerScript.getScriptName());
//			    		sshScriptBase.setSshServiceBean(sshServiceBean);
//			    		sshScriptBase.setUsername("orleven");
//			    		sshScriptBase.setPassword("123456");
//			    		sshScriptBase.getVulnerBean().setVulner(vulnerScript);
//			    		sshScriptBase.prove();
//			    		System.out.println("********************************");
//			    		System.out.println(sshScriptBase.getVulnerBean().getProveBeans().get(0).getSendMessage());
//			    		System.out.println(sshScriptBase.getVulnerBean().getProveBeans().get(0).getReceiveMessage());
//			    	}
//			    	
//			    }
//			}
//		}
		
	/**
	 * SSH 端口 弱口令测试
	 * @data 2017年5月16日
	 */
	public void sshUnitTest(){
		// 模块初始化
		MainModule mainModule = IOC.ctx.getBean(MainModule.class);
		mainModule.init();
		
		// 目标初始化
		String host = "192.168.199.130";
		String OS = "Linux";
		String ports = "22"; 
		int threads = 10;
		
		// 主机基础信息初始化
		BasicInfoBean basicInfoBean = IOC.ctx.getBean(BasicInfoBean.class);
		basicInfoBean.setHost(host);
		basicInfoBean.setOS(OS);
				
		// 主机SSH信息初始化
		ServiceBean serviceBean = IOC.ctx.getBean(ServiceBean.class);
		serviceBean.setPort(ports);
		serviceBean.setServiceType("SSH");
		
		// 赋值
		SshServiceBean sshServiceBean = IOC.ctx.getBean(SshServiceBean.class);
		sshServiceBean.setBasicInfoBean(basicInfoBean);
		sshServiceBean.setServiceBean(serviceBean);
		
		// 加载字典
		BurstDictionary burstDictionary = IOC.ctx.getBean(BurstDictionary.class);
		burstDictionary.load();
		
		// 爆破初始化
		int size = burstDictionary.getPasswords().size();
		int len = size % threads==0? size/threads:size/threads + 1;
		SshWeakBurst sshWeakBurst =  IOC.ctx.getBean(SshWeakBurst.class);
		sshWeakBurst.setTotalCount(size);
		sshWeakBurst.setCurrentCount(0);
		BurstUnit burstUnit = IOC.ctx.getBean(BurstUnit.class);
		
		// 爆破
		try {
			System.out.println(Message.StartChecking);
			System.out.println("[+] "+ sshServiceBean.getBasicInfoBean().getHost() + 
        			":" + sshServiceBean.getServiceBean().getPort());
			
			// 创建线程
			List<Future<Boolean>> tasks = new ArrayList();
			for(int i = 0;i < threads; i++){
				Future<Boolean> task = burstUnit.doOneSShPasswordDicBurstUnit(sshServiceBean, i * len, (i + 1)* len ,"orleven");
				tasks.add(task);
			}
				
	        while(true) {  
	        	
	        	// 等待运行结果
	        	boolean flag = true;
	        	for(Future<Boolean> task:tasks){
	        		flag &= task.isDone();
	        	}
	  
	        	// 运行结束
	            if(flag) {  
	            	if(sshWeakBurst.getVulnerBean().getIsVulner()==Permeate.isVulner)
	            	{
		            	System.out.println("[+] "+ sshWeakBurst.getSshServiceBean().getBasicInfoBean().getHost() + 
		            			":" + sshWeakBurst.getSshServiceBean().getServiceBean().getPort());
			    		System.out.println(sshWeakBurst.getVulnerBean().getProveBeans().getSendMessage());
			    		System.out.println(sshWeakBurst.getVulnerBean().getProveBeans().getReceiveMessage());
			    		System.out.println(Message.VulnerIsExist);
			    		
			    		VulnerReport vulnerReport = new VulnerReport(sshWeakBurst.getSshServiceBean().getBasicInfoBean().getHost(),
			    				 sshWeakBurst.getSshServiceBean().getServiceBean().getPort(),
			    				 sshWeakBurst.getSshServiceBean().getServiceBean().getServiceType(),
			    				 Long.toString(DataUtil.ipToLong("127.0.0.1")),
			    				 sshWeakBurst.getVulnerBean().getVulner().getVulnerId(),
			    				 sshWeakBurst.getVulnerBean().getProveBeans().getSendMessage(),
			    				 sshWeakBurst.getVulnerBean().getProveBeans().getReceiveMessage(),
			    				 DataUtil.getTime());
			    		vulnerReportDaoImp.insert(vulnerReport);
			    		
	            	}else{
	            		sshWeakBurst.getVulnerBean().setIsVulner(Permeate.isNotVulner);
	            		System.out.println(Message.VulnerIsNoExist);
	            	}
	                break;  
	            }  
	            Thread.sleep(10000);  
	            System.out.println(Message.VulnerIsChecking + sshWeakBurst.getSchedule());
	        }  
	        
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}
}
